// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {

    static Array twoToThe;
    
    /** Initializes the library. */
    function void init() {
        let twoToThe = Array.new(16);
        let twoToThe[0]  = 1;
        let twoToThe[1]  = 2;
        let twoToThe[2]  = 4;
        let twoToThe[3]  = 8;
        let twoToThe[4]  = 16;
        let twoToThe[5]  = 32;
        let twoToThe[6]  = 64;
        let twoToThe[7]  = 128;
        let twoToThe[8]  = 256;
        let twoToThe[9]  = 512;
        let twoToThe[10] = 1024;
        let twoToThe[11] = 2048;
        let twoToThe[12] = 4096;
        let twoToThe[13] = 8192;
        let twoToThe[14] = 16384;
        let twoToThe[15] = 16384 + 16384;
        return;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        if (x < 0) {
            return -x;
        }
        return x;
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
        var int sum, i, bitMask;
        let i = 0;
        let bitMask = 1;
        while (i < 16) {
            if (y & bitMask) {
                let sum = sum + x;
            }
            let bitMask = bitMask + bitMask;
            let x = x + x;
            let i = i + 1;
        }
        return sum;
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
        var int q;
        if (y = 0) {
        do Sys.error(3);
        }
        if (x < 0) {
        return -Math.divide(-x, y);
        }
        if (y < 0) {
        return -Math.divide(x, -y);
        }
        if (y > x) {
            return 0;
        }
        let q = Math.divide(x, y + y);
        if ((x - (2 * q * y)) < y) {
            return q + q;
        }
        return q + q + 1;
    }
    
    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
        var int y, j, val, valSqr;
        let j = 7;
        while (~(j < 0)) {
            let val = (y + twoToThe[j]);
            let valSqr = (val * val);
            if (~(valSqr > x) & (valSqr > 0)) {
                let y = val;
            }
            let j = j - 1;
        }
        return y;
    }

    // function int pow(int base, int exp) {
    //     var int result;
    //     let result = 1;
    //     while (exp > 0) {
    //         if (exp & 1) {
    //             let result = result * base;
    //         }
    //         let exp = exp / 2;
    //         let base = base * base;
    //     }
    //     return result;
    // }

    /** Returns the greater number. */
    function int max(int a, int b) {
        if (a > b) {
            return a;
        }
        return b;
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
        if (a < b) {
            return a;
        }
        return b;
    }
}