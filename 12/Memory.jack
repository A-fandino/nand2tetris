// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {
    static Array ram, freeList;
    static int next, length;
    /** Initializes the class. */
    function void init() {
        let next = 0;
        let length = 1;
        let ram = 0;
        let freeList = 2048;
        let freeList[next] = null;
        let freeList[length] = 14335;
        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return ram[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let ram[address] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
        var int targetSize;
        var Array node, oldNode, foundNode, parentNode, foundNodeParent;
        let targetSize = size + 2;
        let node = freeList;
        let foundNode = node;
        while (~(node = null)) {
            if (~(node[length] < targetSize) & (node[length] > foundNode[length])) {
                let foundNode = node;
                let foundNodeParent = parentNode;
            }
            let parentNode = node;
            let node = node[next];
        }

        if (foundNode[length] < targetSize) {
            return -1;
        }


        // OLD NODE
        let oldNode = foundNode + targetSize;
        let oldNode[next] = foundNode[next];
        let oldNode[length] = foundNode[length] - targetSize;

        // NEXT NODE
        let node = foundNode;
        let node[next] = null;
        let node[length] = size;

        if (oldNode[length] = 0) {
            let oldNode = oldNode[next];
        }

        if (foundNodeParent = 0) {
            let freeList = oldNode;
        } else {
            let foundNodeParent[next] = oldNode;
        }

        return node + 2;

    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        let o[-2] = freeList;
        let freeList = o - 2;
        return;
    }    
}
